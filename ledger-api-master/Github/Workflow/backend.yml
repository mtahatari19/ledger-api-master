name: Backend CI/CD

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - ".github/workflows/backend.yml"
      - "deploy/backend/**"
  pull_request:
    branches: [main]
    paths:
      - "backend/**"
      - ".github/workflows/backend.yml"
      - "deploy/backend/**"

env:
  NODE_VERSION: "20"
  WORKDIR: backend
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/backend
  WEBHOOK_URL: ${{ secrets.NOTIFY_WEBHOOK_URL }}

jobs:
  ci:
    name: Lint + Test + Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKDIR }}
    steps:
      - uses: actions/checkout@v4

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ env.WORKDIR }}/package-lock.json

      - name: Install
        run: npm ci

      - name: Lint
        run: npm run lint --if-present

      - name: Unit tests
        run: npm test --if-present -- --ci --reporters=default --watch=false

      - name: Build (tsc or build script)
        run: npm run build --if-present

  docker:
    name: Build Container (multi-arch)
    needs: ci
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare tags
        id: meta
        run: |
          echo "sha_short=${GITHUB_SHA::12}" >> $GITHUB_OUTPUT

      - name: Build (PR validate only)
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: false
          tags: ${{ env.IMAGE_NAME }}:pr-${{ github.event.number || 'check' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Push (main)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.sha_short }}
            ${{ env.IMAGE_NAME }}:main
            ${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Raspberry Pi (Docker Compose)
    needs: docker
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      COMPOSE_DIR: deploy/backend
    steps:
      - uses: actions/checkout@v4

      - name: Render compose with pinned tag
        run: |
          mkdir -p out
          SHA_SHORT=${GITHUB_SHA::12}
          sed "s|__IMAGE__|ghcr.io/${GITHUB_REPOSITORY_OWNER}/backend:${SHA_SHORT}|g" \
            ${{ env.COMPOSE_DIR }}/docker-compose.yml > out/docker-compose.yml
          if [ -f "${{ env.COMPOSE_DIR }}/.env" ]; then cp "${{ env.COMPOSE_DIR }}/.env" out/.env; fi

      - name: Copy compose/.env to Pi
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PI_HOST }}
          username: ${{ secrets.PI_USER }}
          key: ${{ secrets.PI_SSH_KEY }}
          port: ${{ secrets.PI_SSH_PORT || 22 }}
          source: "out/*"
          target: "/srv/apps/backend/"

      - name: Login & Compose up (retry)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.PI_HOST }}
          username: ${{ secrets.PI_USER }}
          key: ${{ secrets.PI_SSH_KEY }}
          port: ${{ secrets.PI_SSH_PORT || 22 }}
          script_stop: true
          script: |
            set -euo pipefail
            cd /srv/apps/backend
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin
            n=0
            until [ $n -ge 3 ]
            do
              docker compose -f docker-compose.yml --env-file .env pull && \
              docker compose -f docker-compose.yml --env-file .env up -d --remove-orphans && break
              n=$((n+1))
              echo "Deploy failed, retrying in 10s ($n/3)..." >&2
              sleep 10
            done
            docker image prune -f || true

      - name: Notify (success/failure)
        if: always()
        run: |
          curl -fsS -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "$(jq -n --arg s "${{ job.status }}" --arg r "$GITHUB_REPOSITORY" --arg u "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" \
            '{text: ("Backend deploy: " + $s + " — " + $r + " → " + $u)}')"
